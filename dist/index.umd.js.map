{"version":3,"file":"index.umd.js","sources":["../src/Jargon.ts","../src/decorators/alias.ts","../src/decorators/option.ts","../src/decorators/positional.ts","../src/decorators/required.ts"],"sourcesContent":["export default class Jargon {\n  [index: string]: any;\n  options: string[] = [];\n  positionals: string[] = [];\n\n  parse(): void {\n    let raw = process.argv.slice(2);\n\n    let [positionalArgs, optionsArgs] = raw.reduce(\n      (accum: [string[], string[]], val) => {\n        if (/^-/.exec(val)) {\n          accum[1].push(val);\n        } else {\n          accum[0].push(val);\n        }\n        return accum;\n      },\n      [[], []],\n    );\n    this.assertRequired(positionalArgs);\n    this.assignOptions(optionsArgs);\n    this.assignPositionals(positionalArgs, this.positionals);\n    // console.log(optionsArgs, this.options);\n    // console.log(positionalArgs, this.positionals);\n  }\n\n  private assignOptions(optionsArgs: string[]): void {\n    optionsArgs.forEach((option) => {\n      let prop: string;\n      let val;\n      //handle double dash options\n      if (/^--/.exec(option)) {\n        option = option.replace('--', '');\n\n        //boolean option\n        if (!/=/.exec(option)) {\n          prop = option;\n          val = true;\n        } else {\n          [prop, val] = option.split('=');\n        }\n      } else {\n        //single dash argument\n        //doesn't support passing space delimited strings with single dash right now\n        prop = option;\n        val = true;\n      }\n      this[prop] = val;\n    });\n  }\n\n  private assignPositionals(\n    positionalArgs: string[],\n    positionals: string[],\n  ): void {\n    if (!positionals) {\n      return;\n    }\n    console.log(this.positionals);\n    positionalArgs.forEach((arg, index) => {\n      this[positionals[index]] = arg;\n    });\n  }\n\n  private assertRequired(positionalArgs: string[]): void {\n    if (\n      this.requiredArgCount &&\n      this.requiredArgCount > positionalArgs.length\n    ) {\n      throw new Error('missing required parameters');\n    }\n  }\n}\n","import type Jargon from '../Jargon';\n\nexport function alias(\n  ...aliases: string[]\n): (target: Jargon, key: string) => void {\n  return function (target: Jargon, key: string): void {\n    aliases.forEach((alias) => {\n      Object.defineProperty(target, alias, {\n        get() {\n          return this[key];\n        },\n        set(newValue) {\n          this[key] = newValue;\n        },\n      });\n    });\n    target.parse();\n  };\n}\n","import type Jargon from '../Jargon';\n\nexport function option(target: Jargon, key: string): void {\n  target.options = target.options || [];\n  target.options.push(key);\n  target.parse();\n}\n","import type Jargon from '../Jargon';\n\nexport function positional(target: Jargon, key: string): void {\n  target.positionals = target.positionals || [];\n  target.positionals.push(key);\n  target.parse();\n}\n","import type Jargon from '../Jargon';\n\nexport function required(target: Jargon, key: string): void {\n  target.requiredArgCount = target.requiredArgCount || 0;\n  target.requiredArgCount++;\n}\n"],"names":[],"mappings":"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"}